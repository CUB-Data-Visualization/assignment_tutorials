---
title: "Tutorial 1: Introduction to R"
subtitle: "Adapted from [CodeAcademy](https://www.codecademy.com/courses/learn-r)"
author: "WHO AM I?"
date: "Last rendered `r format(Sys.Date(), '%d %b %Y')`"
format: 
  html:
    highlight-style: dracula
    code-line-numbers: true
embed-resources: true
editor: visual
editor_options: 
  chunk_output_type: inline
---

# Calculations

Let's start with the basic syntax for mathematical calculations in R. R performs addition, subtraction, multiplication, division, and exponentiation with `+`, `-`, `*`, `/`, and `^`, and terms can be grouped with `(` `)`. Mathematical operations in R follow the standard mathematical [order of operations](https://en.wikipedia.org/wiki/Order_of_operations). Let's write our first line of R code and calculate some basic math!

> Task: Calculate the square of 25 \* 4 + 9 / 3

```{r}

```

# Comments

The second thing we're going to do is write descriptive comments. Text written in a program but not run by the computer is called a comment. R interprets anything after a `#` as a comment. Why would anyone want the computer to ignore a part of their file? Multiple reasons! Comments can:

-   Provide context for why something is written the way it is:

    ```{r}
    # This code will be used to count the number of times anyone tweets the word persnickety
    persnickety_count <- 0
    ```

-   help other people reading the code understand it faster

    ```{r, eval = FALSE}
    # This code will calculate the likelihood that it will rain tomorrow
    complicated_rain_calculation_for_tomorrow()
    ```

-   Ignore a line of code and see how a program will run without it:

    ```{r, eval = FALSE}
    # useful_value <- old_sloppy_code()
    useful_value <- new_clean_code()
    ```

> Task: Add a comment inside the code block that explains that the line of code is computing the volume to a cube.

```{r}

5^3
```

# Data Types

In R and in programming in general, data types are the classifications we give different kinds of information pieces. Here, we will explore the following R data types:

-   *Numeric*: Any number with or without a decimal point: `23`, `0.03` and the numeric null value `NA`.

-   *Character*: Any grouping of characters on your keyboard (letters, numbers, spaces, symbols, etc.) or text. Most strings are surrounded by single quotes: `' ... '` or double quotes `" ... "`. Sometimes you will hear this type referred to as `string`.

-   *Logical*: This data type only has two possible values - either `TRUE` or `FALSE` (without quotes). It's helpful to think of logical types or booleans as on and off switches or as the answers to a "yes" or "no" question.

-   *Vectors*: A list of related data that is all the same type (not to be confused with a vector in mathematics).

-   *NA*: This data type represents the absence of a value, and is represented by the keyword `NA` (without quotes) but it has its own significance in the context of the different types. That is there is a numeric `NA`, a character `NA`, and a logical `NA`.

> Task: Run the following code block to check data types using the `class()` function:

```{r}
class(2)
class("hello")
class("23")
class (FALSE)
class(NA)
```

> Concept check: why is the third line identified as a `character` type?

> Task: print the name of your favorite fruit, as well as your favorite number once as a numeric type and character string.

```{r}

```

# Variables

In programming, variables allow us to store information and associate that information with a name. In R, we assign variables by using the assignment operator, an arrow sign (`<-`) made with a carat and a dash (`=` works too but, `<-` is preferred for clarity).

Variables can't have spaces or symbols in their names other than an underscore (`_`). They can't begin with numbers but they can have numbers after the first letter (e.g., `cool_variable_5` is OK).

They are called "variables" because the information stored in them can be changed. For example, take the variable `message_string`:

```{r}
# Greeting
message_string <- "Hello there"
message_string
 
# Farewell
message_string <- "Hasta la vista"
message_string
```

> Task: create a variable called `fav_veggie` with your favorite vegetable as a string, and a variable called `fav_number` with your favorite number in it (as a number, not a string).

```{r}

```

# Vectors

We mentioned Vectors when we introduced data types earlier. In R, vectors are a list-like structure that contain items of the same data type. We create vectors by separating values (of the same data type) with a comma and wrapping them inside `c()`. For example:

```{r}
spring_months <- c("March", "April","May","June")
spring_months
```

A few things you should know how to do with vectors:

-   check the type of elements in a vector by using `typeof(vector_name)`
-   check the length of a vector by using `length(vector_name)`
-   access individual elements in the vector by using `[]` and placing the element position inside the brackets (starting with 1, not 0!). For example, if we wanted to access the second element we would write: `vector_name[2]`

> Task: try this out with the `spring_months` vector.

```{r}
typeof(spring_months)
length(spring_months)
spring_months[3]
```

> Task: create a numeric vector named `phone` that contains your phone number as three numbers: your area code, the next three digits, and then the last four.

```{r}

```

# Comparison Operators

Here is a list of some handy comparison operators and their syntax:

-   Less than: `<`

-   Greater than: `>`

-   Less than or equal to: `<=`

-   Greater than or equal to: `>=`

-   Is equal to: `==`

-   Is NOT equal to: `!=`

Comparison operators compare the value on the left with the value on the right. It can be helpful to think of comparison statements as questions. When the answer is "yes", the statement evaluates to `TRUE`, and when the answer is "no", the statement evaluates to `FALSE`. Example:

```{r}
# Question: is 10 smaller than 12?
10 < 12
```

> Task: use a comparison operator to check if 56 is greater or equal to 129. What should this evaluate to? Check by running your code. Then use a comparison operator to check if 56 is NOT equal to 129. What should this evaluate to? Check it.

```{r}

```

These operators also work for vectors if their lengths are compatible, check out the result of the following comparisons. Can you guess the outcome before running them?

```{r}
c(1, 5, 9) > 4
c(1, 5, 9) > c(4, 4, 4)
c(1, 5, 9) > c(4, 7, 1)
```

> Concept check: why does this comparison NOT work?

```{r}
c(1, 5, 9) <= c(2, 3)
```

# Logical Operators

In addition to comparisons there are *logical operators* that can be used to construct more complex questions. There are three logical operators and a few related ones that are very useful:

-   the AND operator (`&`)

-   the OR operator (`|`) and related IN operator (`%in%`)

-   the NOT operator, otherwise known as the bang operator (`!`)

When we use the `&` operator, we are checking that two things are `TRUE` either for individual values or vectors - can you guess the outcomes before running the code?

```{r}
# Question: is the number bigger than 30 AND smaller than 90?
number <- 42
number > 30 & number < 90

# Question: which of the numbers is bigger than 30 AND smaller than 90?
numbers <- c(27, 42, 102)
numbers > 30 & numbers < 90
```

When we use the `|` operator, we are checking that at least one of two conditions is `TRUE` (could be both). Note that if the first is `TRUE`, the second isn't even checked:

```{r}
# Question: is the number bigger than 100 OR smaller than 50?
number > 100 | number < 50

# Question: are the numbers bigger than 100 OR smaller than 50?
numbers > 100 | numbers < 50
```

When checking whether something is part of a set of values, it can be useful to use the `%in%` operator which is a shortcut for a long OR statement.

```{r}
# Question: which of the letters is one of the first five letters of the alphabet?
letters <- c("d", "p", "a")
letters == "a" | letters == "b" | letters == "c" | letters == "d" | letters == "e"

# equivalent:
letters %in% c("a", "b", "c", "d", "e")
```

The `!` NOT operator simply reverses, or negates, the value of an expression, Essentially, the `!` operator will either take a `TRUE` value and pass back `FALSE`, or it will take a `FALSE` value and pass back `TRUE`.

```{r}
# compare with the earlier statements
!(numbers > 30 & numbers < 90)
!(numbers > 100 | numbers < 50)
!(letters %in% c("a", "b", "c", "d", "e"))
```

# Conditionals

In programming languages, you often perform a task based on a condition. We can perform a task based on a condition using an if statement:

```{r}
if (TRUE) {
  print("This message will print!")
} 
```

Notice in the example above, we have an `if` statement. The if statement is composed of:

-   The if keyword followed by a set of parentheses `()` which is followed by a code block, or block statement, indicated by a set of curly braces `{}`.

-   Inside the parentheses `()`, a condition is provided that evaluates to `TRUE` or `FALSE`.

-   If the condition evaluates to true, the code inside the curly braces `{}` runs, or executes.

-   If the condition evaluates to false, the code inside the block won't execute.

Knowing how to use if statements will help you introduce logic in your data analysis. There is also a way to add additional conditions (`else if`) that are tested if the one(s) before did not evaluate to `TRUE` and a final catch all (`else`) statement that only runs if none of the statements evaluate to `TRUE`.

```{r}
hour <- 5
if (hour > 21) {
  "Go to sleep"
} else if (hour < 7) {
  "I hope you're sleeping"
} else {
  "Partytime"
}
```

> Task: combine what you learned about logical operators with a conditional statement. There are two variables in your code, `weather` and `high_chance_of_rain`. Write a conditional statement that:
>
> -   If `weather` is `cloudy` and there is a `high_chance_of_rain`, the code block should assign the value of the variable `message` to be `"Pack umbrella!"`
>
> -   If instead the `weather` is `sunny` , `message` should become `"Bring sunglasses!"`
>
> -   Otherwise, the code block should assign the value of the variable `message` to `"No need for umbrella or sunglasses!"`
>
> Based on these condition, what should the value of `message` be? Also check that if you change the conditions, you still get the correct answer.

```{r}
message <- "Should I pack an umbrella?"
weather <- "cloudy"
high_chance_of_rain <- TRUE

# conditional goes here


# output
message
```

For vectors, conditionals become a little more complex because they always have to evaluate to a single `TRUE` or `FALSE` (rather than multiple). Try out the following:

```{r, eval = FALSE}
if ( letters == "a") {
  "we got an a!"
}
```

Instead we can use `all` and `any` as well as their negatives `!all` and `!any` (i.e. none) to test vectors in conditionals. Try to guess before executing which of the following messages will print:

```{r}
letters

if (all(letters == "a")) {
  "they are all a!"
}

if (!all(letters == "a")) {
  "they are not all a! (i.e. at least one non-a)"
}

if (any(letters == "a")) {
  "we got at least one a"
}

if (!any(letters == "a")) {
  "we got not a single a"
}
```

# Functions

Functions are actions we can perform. R provides a number of functions, and you've actually been using a few of them even though you maybe didn't realize!

We *call*, or use, these functions by stating the name of the function and following it with an opening and closing parentheses: ie. `function_name()`. In addition, between the parenthesis, we usually pass in an *argument*, or a value that the function uses to conduct an action, i.e. `function_name(value)`.

Does that syntax look a little familiar? We already used several functions including the combine `c()` (to make a vector), `all()` and `any()` functions! Let's see some more functions in action!

```{r}
sort(c(2,4,10,5,1))
length(c(2,4,10,5,1))
sum(c(5, 15, 10))
```

> Concept check: can you describe what the `sort()` , `length()` and `sum()` functions do?

Understanding how to call a function and what arguments it needs is a fundamental part of leveraging R as a tool to conduct analysis. Fortunately most functions come with documentation which you can call using `?function_name` . For example, check out what `sqrt` does by asking the documentation:

```{r, eval = FALSE}
?sqrt
```

> Task: what do the `ceiling` and `floor` functions do? Check in a code block how they work by applying them to the value of pi (`3.14` )

```{r}

```

Let's practice calling another useful function!

> Task: the `unique()` function takes a vector argument and returns a vector with only the unique elements in that vector (removing all duplicates).
>
> -   Call this function and pass in the argument `data`.
>
> -   Save that result inside a variable named `unique_vals`
>
> -   Output `unique_vals` variable so you can see what is inside the vector with only unique values.

```{r}
data <- c(120,22,22,31,15,120)


```

# **Importing Packages**

R's popularity is also largely due to the many fantastic packages available in the language! A package is a bundle of code that makes coding certain tasks easier. There are all sorts of packages for all sorts of purposes, ranging from visualizing and cleaning data, to ordering pizza or posting a tweet. In fact, most scientists use packages when they code. This is why you might hear them differentiate packages from "Base R." Base R refers the R language by itself and all that it can do without importing any packages.

Although base R has some useful features, most of the time you'll want to import a package to make your life easier. You only need to run this command the first time you install a package, after that there is no need to run it (you might remember doing this for a few packages when first installing R on your computer):

```{r, eval=FALSE}
install.packages("package-name")
```

In this lesson, we coded in base R but let's practice importing one of the most popular R packages: `dplyr`. This is a package used to clean, process, and organize data which you will use as you learn about R. To import a package you simply type `library(package-name)` (without `" "` quotes)

> Task: the following code throws an error because it uses the `dplyr` and `readr` packages without importing both. Import the `dplyr` and `readr` packages by using the `library()` function and then press run so that you can observe the packages do their magic! We'll dive more into these wonderful packages soon.

```{r, message = FALSE}
# load pckages


# load data frame
artists <- read_csv("data/artists.csv", show_col_types = FALSE)

# inspect data frame
artists

# filter and sort data
artists %>%
  select(-country,-year_founded,-albums) %>%
  filter(spotify_monthly_listeners > 20000000, genre != 'Hip Hop') %>%
  arrange(desc(youtube_subscribers))
```
